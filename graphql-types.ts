export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  /** Represents untyped JSON */
  JSON: any;
};

export type Affiliation = {
  __typename?: 'Affiliation';
  role: Scalars['String'];
  tenantId: Scalars['ID'];
  tenantName: Scalars['String'];
};

export type AffiliationInput = {
  id: Scalars['Int'];
  tenantName: Scalars['String'];
};

export type Conference = {
  __typename?: 'Conference';
  id: Scalars['Int'];
  name: Scalars['String'];
  participants: Array<Participant>;
};

export type ConferenceInput = {
  id?: InputMaybe<Scalars['Int']>;
  name: Scalars['String'];
  participants?: InputMaybe<Array<ParticipantInput>>;
  password?: InputMaybe<Scalars['String']>;
};

export type ConferenceMutation = {
  __typename?: 'ConferenceMutation';
  createConference?: Maybe<CreateConferenceMutationPayload>;
  updateConference?: Maybe<UpdateConferenceMutationPayload>;
};


export type ConferenceMutationCreateConferenceArgs = {
  conference: ConferenceInput;
};


export type ConferenceMutationUpdateConferenceArgs = {
  conference: ConferenceInput;
};

/** Autogenerated return type of CreateConferenceMutation */
export type CreateConferenceMutationPayload = {
  __typename?: 'CreateConferenceMutationPayload';
  conference: Conference;
};

/** Autogenerated return type of CreateUserMutation */
export type CreateUserMutationPayload = {
  __typename?: 'CreateUserMutationPayload';
  user: User;
};

/** Autogenerated return type of CreateVerificationMutation */
export type CreateVerificationMutationPayload = {
  __typename?: 'CreateVerificationMutationPayload';
  verifications: Array<Verification>;
};

export type Credential = {
  __typename?: 'Credential';
  accessToken: Scalars['String'];
  client: Scalars['String'];
  expiry: Scalars['Int'];
  tokenType: Scalars['String'];
  uid: Scalars['String'];
};

/** Autogenerated return type of DeleteUserMutation */
export type DeleteUserMutationPayload = {
  __typename?: 'DeleteUserMutationPayload';
  user: User;
};

export type Dossier = {
  __typename?: 'Dossier';
  affiliation: Affiliation;
  candidate: Person;
  companyContact?: Maybe<Person>;
  companyMarkA?: Maybe<Scalars['String']>;
  companyMarkB?: Maybe<Scalars['String']>;
  companyPointsA?: Maybe<Scalars['String']>;
  companyPointsB?: Maybe<Scalars['String']>;
  conference: Conference;
  dossierDownloadPath?: Maybe<Scalars['String']>;
  dossierPath?: Maybe<Scalars['String']>;
  expertMarkA?: Maybe<Scalars['String']>;
  expertMarkB?: Maybe<Scalars['String']>;
  expertMarkC?: Maybe<Scalars['String']>;
  expertPointsA?: Maybe<Scalars['String']>;
  expertPointsB?: Maybe<Scalars['String']>;
  expertPointsC?: Maybe<Scalars['String']>;
  finalMark?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  markDeduction?: Maybe<Scalars['Boolean']>;
  primaryExpert?: Maybe<Person>;
  secondaryExpert?: Maybe<Person>;
  submittedMark?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  verifications?: Maybe<Array<Verification>>;
};

export type DossierInput = {
  affiliation: AffiliationInput;
  candidate: PersonInput;
  companyContact?: InputMaybe<PersonInput>;
  companyMarkA?: InputMaybe<Scalars['String']>;
  companyMarkB?: InputMaybe<Scalars['String']>;
  companyPointsA?: InputMaybe<Scalars['String']>;
  companyPointsB?: InputMaybe<Scalars['String']>;
  conferenceId: Scalars['Int'];
  dossierPath?: InputMaybe<Scalars['String']>;
  expertMarkA?: InputMaybe<Scalars['String']>;
  expertMarkB?: InputMaybe<Scalars['String']>;
  expertMarkC?: InputMaybe<Scalars['String']>;
  expertPointsA?: InputMaybe<Scalars['String']>;
  expertPointsB?: InputMaybe<Scalars['String']>;
  expertPointsC?: InputMaybe<Scalars['String']>;
  finalMark?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['Int']>;
  markDeduction?: InputMaybe<Scalars['Boolean']>;
  primaryExpert?: InputMaybe<PersonInput>;
  secondaryExpert?: InputMaybe<PersonInput>;
  submittedMark?: InputMaybe<Scalars['String']>;
};

export type Evaluation = {
  __typename?: 'Evaluation';
  result: Scalars['JSON'];
};

/** Autogenerated return type of ImportMutation */
export type ImportMutationPayload = {
  __typename?: 'ImportMutationPayload';
  importCount: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  conferences?: Maybe<ConferenceMutation>;
  pkorg?: Maybe<PkorgMutation>;
  userLogin?: Maybe<UserLoginPayload>;
  userLogout?: Maybe<UserLogoutPayload>;
  users?: Maybe<UserMutation>;
  verificationFeedback?: Maybe<VerificationFeedbackMutationPayload>;
  verifications?: Maybe<VerificationMutation>;
};


export type MutationPkorgArgs = {
  baseUrl: Scalars['String'];
  sessionToken: Scalars['String'];
  userAgent?: InputMaybe<Scalars['String']>;
};


export type MutationUserLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationVerificationFeedbackArgs = {
  changeGrading: Scalars['Boolean'];
  comment?: InputMaybe<Scalars['String']>;
  token: Scalars['String'];
};

export type Participant = {
  __typename?: 'Participant';
  email: Scalars['String'];
  forename: Scalars['String'];
  id: Scalars['Int'];
  surname: Scalars['String'];
  verificationsCount?: Maybe<Scalars['Int']>;
};

export type ParticipantInput = {
  email: Scalars['String'];
  forename: Scalars['String'];
  id?: InputMaybe<Scalars['Int']>;
  surname: Scalars['String'];
};

export type Person = {
  __typename?: 'Person';
  forename: Scalars['String'];
  id: Scalars['Int'];
  surname: Scalars['String'];
};

export type PersonInput = {
  forename: Scalars['String'];
  id: Scalars['Int'];
  surname: Scalars['String'];
};

export type PkorgMutation = {
  __typename?: 'PkorgMutation';
  importDossiers?: Maybe<ImportMutationPayload>;
};


export type PkorgMutationImportDossiersArgs = {
  dossiers: Array<DossierInput>;
};

export type PkorgQuery = {
  __typename?: 'PkorgQuery';
  evaluation?: Maybe<Evaluation>;
  sessionUser?: Maybe<SessionUser>;
};


export type PkorgQueryEvaluationArgs = {
  evaluationPath: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  conferences?: Maybe<Array<Conference>>;
  dossiers?: Maybe<Array<Dossier>>;
  participants?: Maybe<Array<Participant>>;
  pkorg?: Maybe<PkorgQuery>;
  system?: Maybe<System>;
  users?: Maybe<Array<User>>;
  verificationFeedback?: Maybe<VerificationFeedback>;
  verifications?: Maybe<Array<Verification>>;
};


export type QueryConferencesArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryDossiersArgs = {
  id?: InputMaybe<Scalars['Int']>;
  ids?: InputMaybe<Array<Scalars['Int']>>;
};


export type QueryParticipantsArgs = {
  conferenceId?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryPkorgArgs = {
  baseUrl: Scalars['String'];
  sessionToken: Scalars['String'];
  userAgent?: InputMaybe<Scalars['String']>;
};


export type QueryUsersArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryVerificationFeedbackArgs = {
  token: Scalars['String'];
};


export type QueryVerificationsArgs = {
  dossierId?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['Int']>;
};

export type SessionUser = {
  __typename?: 'SessionUser';
  affiliations: Array<Affiliation>;
  email: Scalars['String'];
  forename: Scalars['String'];
  surname: Scalars['String'];
};

export type System = {
  __typename?: 'System';
  version: Scalars['String'];
};

/** Autogenerated return type of UpdateConferenceMutation */
export type UpdateConferenceMutationPayload = {
  __typename?: 'UpdateConferenceMutationPayload';
  conference: Conference;
};

/** Autogenerated return type of UpdateUserMutation */
export type UpdateUserMutationPayload = {
  __typename?: 'UpdateUserMutationPayload';
  user: User;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
};

export type UserInput = {
  email: Scalars['String'];
  id?: InputMaybe<Scalars['Int']>;
  name: Scalars['String'];
  nickname?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  passwordConfirmation?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UserLogin */
export type UserLoginPayload = {
  __typename?: 'UserLoginPayload';
  authenticatable: User;
  credentials: Credential;
};

/** Autogenerated return type of UserLogout */
export type UserLogoutPayload = {
  __typename?: 'UserLogoutPayload';
  authenticatable: User;
};

export type UserMutation = {
  __typename?: 'UserMutation';
  createUser?: Maybe<CreateUserMutationPayload>;
  deleteUser?: Maybe<DeleteUserMutationPayload>;
  updateUser?: Maybe<UpdateUserMutationPayload>;
};


export type UserMutationCreateUserArgs = {
  user: UserInput;
};


export type UserMutationDeleteUserArgs = {
  id: Scalars['Int'];
};


export type UserMutationUpdateUserArgs = {
  id: Scalars['Int'];
  user: UserInput;
};

export type Verification = {
  __typename?: 'Verification';
  changeGrading?: Maybe<Scalars['Boolean']>;
  comment?: Maybe<Scalars['String']>;
  dossier: Dossier;
  id: Scalars['Int'];
  participant: Participant;
  verifiedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type VerificationFeedback = {
  __typename?: 'VerificationFeedback';
  changeGrading?: Maybe<Scalars['Boolean']>;
  comment?: Maybe<Scalars['String']>;
  dossier: Dossier;
  id: Scalars['Int'];
};

/** Autogenerated return type of VerificationFeedbackMutation */
export type VerificationFeedbackMutationPayload = {
  __typename?: 'VerificationFeedbackMutationPayload';
  verification: VerificationFeedback;
};

export type VerificationInput = {
  dossierId: Scalars['Int'];
  id?: InputMaybe<Scalars['Int']>;
  participantId: Scalars['Int'];
};

export type VerificationMutation = {
  __typename?: 'VerificationMutation';
  createVerification?: Maybe<CreateVerificationMutationPayload>;
};


export type VerificationMutationCreateVerificationArgs = {
  verifications: Array<VerificationInput>;
};

export type SignInMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type SignInMutation = { __typename?: 'Mutation', userLogin?: { __typename?: 'UserLoginPayload', authenticatable: { __typename?: 'User', email: string, name?: string | null }, credentials: { __typename?: 'Credential', accessToken: string, client: string, expiry: number, tokenType: string, uid: string } } | null };

export type ReadUserQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type ReadUserQuery = { __typename?: 'Query', users?: Array<{ __typename?: 'User', id: number, email: string, name?: string | null, nickname?: string | null }> | null };

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['Int'];
  user: UserInput;
}>;


export type UpdateUserMutation = { __typename?: 'Mutation', users?: { __typename?: 'UserMutation', updateUser?: { __typename?: 'UpdateUserMutationPayload', user: { __typename?: 'User', id: number, email: string, name?: string | null, nickname?: string | null } } | null } | null };

export type IndexUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type IndexUsersQuery = { __typename?: 'Query', users?: Array<{ __typename?: 'User', id: number, email: string, name?: string | null, nickname?: string | null }> | null };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['Int'];
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', users?: { __typename?: 'UserMutation', deleteUser?: { __typename?: 'DeleteUserMutationPayload', user: { __typename?: 'User', id: number } } | null } | null };

export type CreateUserMutationVariables = Exact<{
  user: UserInput;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', users?: { __typename?: 'UserMutation', createUser?: { __typename?: 'CreateUserMutationPayload', user: { __typename?: 'User', id: number, email: string, name?: string | null, nickname?: string | null } } | null } | null };

export type IndexDossiersQueryVariables = Exact<{ [key: string]: never; }>;


export type IndexDossiersQuery = { __typename?: 'Query', dossiers?: Array<{ __typename?: 'Dossier', id: number, submittedMark?: string | null, markDeduction?: boolean | null, tags: Array<string>, dossierDownloadPath?: string | null, affiliation: { __typename?: 'Affiliation', tenantName: string }, candidate: { __typename?: 'Person', forename: string, surname: string, id: number }, conference: { __typename?: 'Conference', id: number, name: string } }> | null };

export type DossierVerificationExportQueryVariables = Exact<{ [key: string]: never; }>;


export type DossierVerificationExportQuery = { __typename?: 'Query', dossiers?: Array<{ __typename?: 'Dossier', companyMarkA?: string | null, companyMarkB?: string | null, companyPointsA?: string | null, companyPointsB?: string | null, expertMarkA?: string | null, expertMarkB?: string | null, expertMarkC?: string | null, expertPointsA?: string | null, expertPointsB?: string | null, finalMark?: string | null, expertPointsC?: string | null, id: number, markDeduction?: boolean | null, submittedMark?: string | null, affiliation: { __typename?: 'Affiliation', tenantName: string }, candidate: { __typename?: 'Person', forename: string, id: number, surname: string }, companyContact?: { __typename?: 'Person', forename: string, id: number, surname: string } | null, conference: { __typename?: 'Conference', id: number, name: string }, primaryExpert?: { __typename?: 'Person', forename: string, id: number, surname: string } | null, secondaryExpert?: { __typename?: 'Person', forename: string, id: number, surname: string } | null, verifications?: Array<{ __typename?: 'Verification', changeGrading?: boolean | null, comment?: string | null, id: number, verifiedAt?: any | null, participant: { __typename?: 'Participant', forename: string, email: string, surname: string, id: number } }> | null }> | null };

export type ReadVerificationFeedbackQueryVariables = Exact<{
  token: Scalars['String'];
}>;


export type ReadVerificationFeedbackQuery = { __typename?: 'Query', verificationFeedback?: { __typename?: 'VerificationFeedback', changeGrading?: boolean | null, comment?: string | null, dossier: { __typename?: 'Dossier', candidate: { __typename?: 'Person', forename: string, surname: string } } } | null };

export type SendVerificationFeedbackMutationVariables = Exact<{
  token: Scalars['String'];
  changeGrading: Scalars['Boolean'];
  comment?: InputMaybe<Scalars['String']>;
}>;


export type SendVerificationFeedbackMutation = { __typename?: 'Mutation', verificationFeedback?: { __typename?: 'VerificationFeedbackMutationPayload', verification: { __typename?: 'VerificationFeedback', id: number } } | null };

export type ReadDossiersQueryVariables = Exact<{
  ids?: InputMaybe<Array<Scalars['Int']> | Scalars['Int']>;
}>;


export type ReadDossiersQuery = { __typename?: 'Query', dossiers?: Array<{ __typename?: 'Dossier', id: number, conference: { __typename?: 'Conference', id: number, name: string, participants: Array<{ __typename?: 'Participant', email: string, forename: string, surname: string, id: number }> }, candidate: { __typename?: 'Person', forename: string, surname: string }, companyContact?: { __typename?: 'Person', forename: string, surname: string } | null, primaryExpert?: { __typename?: 'Person', forename: string, surname: string } | null, secondaryExpert?: { __typename?: 'Person', forename: string, surname: string } | null }> | null };

export type CreateVerificationsMutationVariables = Exact<{
  verifications: Array<VerificationInput> | VerificationInput;
}>;


export type CreateVerificationsMutation = { __typename?: 'Mutation', verifications?: { __typename?: 'VerificationMutation', createVerification?: { __typename?: 'CreateVerificationMutationPayload', verifications: Array<{ __typename?: 'Verification', id: number }> } | null } | null };

export type ReadDossierQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type ReadDossierQuery = { __typename?: 'Query', dossiers?: Array<{ __typename?: 'Dossier', conference: { __typename?: 'Conference', id: number, participants: Array<{ __typename?: 'Participant', email: string, forename: string, surname: string, id: number }> }, companyContact?: { __typename?: 'Person', forename: string, surname: string } | null, primaryExpert?: { __typename?: 'Person', forename: string, surname: string } | null, secondaryExpert?: { __typename?: 'Person', forename: string, surname: string } | null }> | null };

export type CreateVerificationMutationVariables = Exact<{
  verifications: Array<VerificationInput> | VerificationInput;
}>;


export type CreateVerificationMutation = { __typename?: 'Mutation', verifications?: { __typename?: 'VerificationMutation', createVerification?: { __typename?: 'CreateVerificationMutationPayload', verifications: Array<{ __typename?: 'Verification', id: number }> } | null } | null };

export type IndexVerificationsQueryVariables = Exact<{
  dossierId?: InputMaybe<Scalars['Int']>;
}>;


export type IndexVerificationsQuery = { __typename?: 'Query', verifications?: Array<{ __typename?: 'Verification', id: number, changeGrading?: boolean | null, comment?: string | null, verifiedAt?: any | null, participant: { __typename?: 'Participant', forename: string, surname: string, email: string } }> | null };

export type ReadConferenceQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type ReadConferenceQuery = { __typename?: 'Query', conferences?: Array<{ __typename?: 'Conference', id: number, name: string, participants: Array<{ __typename?: 'Participant', id: number, forename: string, surname: string, email: string }> }> | null };

export type UpdateConferenceMutationVariables = Exact<{
  conference: ConferenceInput;
}>;


export type UpdateConferenceMutation = { __typename?: 'Mutation', conferences?: { __typename?: 'ConferenceMutation', updateConference?: { __typename?: 'UpdateConferenceMutationPayload', conference: { __typename?: 'Conference', id: number, name: string } } | null } | null };

export type IndexConferencesQueryVariables = Exact<{ [key: string]: never; }>;


export type IndexConferencesQuery = { __typename?: 'Query', conferences?: Array<{ __typename?: 'Conference', id: number, name: string }> | null };

export type CreateConferenceMutationVariables = Exact<{
  conference: ConferenceInput;
}>;


export type CreateConferenceMutation = { __typename?: 'Mutation', conferences?: { __typename?: 'ConferenceMutation', createConference?: { __typename?: 'CreateConferenceMutationPayload', conference: { __typename?: 'Conference', id: number, name: string } } | null } | null };

export type IndexParticipantsQueryVariables = Exact<{
  conferenceId: Scalars['Int'];
}>;


export type IndexParticipantsQuery = { __typename?: 'Query', participants?: Array<{ __typename?: 'Participant', id: number, forename: string, surname: string, email: string, verificationsCount?: number | null }> | null };

export type CheckConnectionQueryVariables = Exact<{
  baseUrl: Scalars['String'];
  sessionToken: Scalars['String'];
  userAgent: Scalars['String'];
}>;


export type CheckConnectionQuery = { __typename?: 'Query', pkorg?: { __typename?: 'PkorgQuery', sessionUser?: { __typename?: 'SessionUser', email: string, forename: string, surname: string, affiliations: Array<{ __typename?: 'Affiliation', tenantName: string, tenantId: string, role: string }> } | null } | null };

export type ImportDossiersMutationVariables = Exact<{
  baseUrl: Scalars['String'];
  sessionToken: Scalars['String'];
  userAgent: Scalars['String'];
  dossiers: Array<DossierInput> | DossierInput;
}>;


export type ImportDossiersMutation = { __typename?: 'Mutation', pkorg?: { __typename?: 'PkorgMutation', importDossiers?: { __typename?: 'ImportMutationPayload', importCount: number } | null } | null };

export type RetrieveEvaluationQueryVariables = Exact<{
  baseUrl: Scalars['String'];
  sessionToken: Scalars['String'];
  userAgent: Scalars['String'];
  evaluationPath: Scalars['String'];
}>;


export type RetrieveEvaluationQuery = { __typename?: 'Query', pkorg?: { __typename?: 'PkorgQuery', evaluation?: { __typename?: 'Evaluation', result: any } | null } | null };
